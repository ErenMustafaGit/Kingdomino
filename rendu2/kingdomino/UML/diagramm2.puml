@startuml
'https://plantuml.com/sequence-diagram
'skinparam style strictuml
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods
skinparam BackgroundColor HoneyDew

package Controller #technology{

    class GameController{

        +GameController(game:GameContext)
        +initializeGame(nbPlayers:Integer, colors:KingColor[],pseudo:String[], gameMode:Integer)
        +placeCastle(player:Player,pos_x:Integer, pos_y:Integer)
        +placeTile(pos_x:Integer, pos_y:Integer):Boolean
        +skipTurn()
        +pickTiles()
        +chooseTile(tile:Tile)
        +rotate()
        +reverse()
        +destroyGame()
    }
}
package Model #mistyrose{

    class Castle implements Positionnable{
        +Castle()
        +getColor():GroundColor
        +getCrownNumber():Integer
        +isGroundCounted():Boolean
        +isCrownCounted():Boolean
        +setGroundCounted(groundCounted:Boolean)
        +setCrownCounted(crownCounted:Boolean)
    }

    class Deck{

        +Deck()
        +Deck(deckSize:Integer)
        +getTile():Tile
        +getNbTiles():Integer
    }

    enum Direction{
        NORTH
        SOUTH
        EAST
        WEST
    }

    class TwoPlayers implements PlayerStrategy{
        +getnbTile():Integer
        +getnbBoard():Integer
        +getnbKings():Integer
    }

    class ThreePlayers implements PlayerStrategy{
        +getnbTile():Integer
        +getnbBoard():Integer
        +getnbKings():Integer
    }

    class FourPlayers implements PlayerStrategy{
        +getnbTile():Integer
        +getnbBoard():Integer
        +getnbKings():Integer
    }

    class GameContext{
        '-kings:King[] attribut pris pas la relation !!
        '-nextRoundKings:King[] pareil !!
        -turn : Integer

        +GameContext()
        +destroy()
        +getCurrentTiles(): Tile[]
        +addObserver(gameObserver:GameObserver)
        +setPlayerStrategy(nbPlayers:Integer)
        +getGameMode():GameMode
        +getNbPlayersStrat(): PlayerStrategy
        +setGameStrategy(gameModeChoosen: Integer)
        +isHarmony():Boolean
        +initGame(colors: KingColor[],pseudo:String[])
        +getPlayers(i:Integer):Player
        +getPlayersNb():Integer

        -createDeck()
        -createKing(color:KingColor, number:Integer, player:Player)
        -createPlayers(colors:KingColor[],pseudo:String[])

        +getPlayerCastleTurn():Player
        +getKingTurn():King
        +getTurn(): Integer
        +pickTiles()
        +setCastle(player:Player, x: Integer, y: Integer): Boolean
        +setTile(x: Integer, y: Integer):Boolean
        +allTilesChoosen(): Boolean
        +chooseTile(tile:Tile)
        +orderNextRoundKings()
        +rotateCurrentTile()
        +reverseCurrentTile()
        +skipTurn()
        +getPlayersRank():Player[]
        +notifyObservers()
        +notifyObserversEnd()
    }

    interface GameMode <<interface>>{
        +calculateScore(p:PlayerBoard):Integer
        +isHarmony(p:PlayerBoard): Boolean
        +hasHarmony():Boolean
        +isKingdomMiddle(p:PlayerBoard):Boolean
    }

    interface GameObserver <<interface>>{
        +update(game:GameContext)
        +updateEnd(gameContext:GameContext)
    }

    class Ground implements Positionnable{
        -crownNumber:Integer
        -groundCounted:Boolean
        -crownCounted:Boolean

        +Ground(color:GroundColor, crownNumber:Integer)
        +isGroundCounted():Boolean
        +isCrownCounted():Boolean
        +setCrownCounted(crownNumber:Boolean)
        +setGroundCounted(groundCounted:Boolean)
        +getColor():GroundColor
        +getCrownNumber():Integer
    }

    enum GroundColor{
        -GREY
        -BLUE
        -DARKGREEN
        -BLACK
        -BROWN
        -YELLOW
        -LIGHTGREEN
        +{static}+getColor(String:color):GroundColor
    }

    interface GameObserver <<interface>>{
         +update(game:GameContext)
         +updateEnd(gameContext:GameContext)
    }

    class Harmony extends ModeDecorator{
        +Harmony(gameMode:GameMode)
        +calculateScore(p:PlayerBoard):Integer
        -calculateHarmonyBonus(p:PlayerBoard):Integer
        +isHarmony(p:PlayerBoard):Boolean
        +hasHarmony():Boolean
        +isKingdomMiddle():Boolean
    }

    class King{
        '-player:Player
        '-choosenTile:Tile[] Récuperer dans la relation avec Tile !

        +King(color:KingColor, player:Player)
        +getColor():KingColor
        +setChoosenTile(tile:Tile)
        +removeTile()
        +getTile():Tile
        +getPlayer():Player
    }

    enum KingColor{
        PINK
        BLUE
        GREEN
        YELLOW
    }

    class MiddleKingdom extends ModeDecorator{
        +MiddleKingdom(gameMode:GameMode)
        +calculateScore(p:PlayerBoard):Integer
        -calculateKingdomBonus(p:PlayerBoard):Integer
        +isKingdomMiddle(p:PlayerBoard):Boolean
        +isHarmony(p:PlayerBoard):Boolean
        +hasHarmony():Boolean
    }

    abstract class ModeDecorator implements GameMode{
        +ModeDecorator(gameMode:GameMode)
        +calculateScore(p:PlayerBoard):Integer
        +isHarmony(p:PlayerBoard):Boolean
        +isKingdomMiddle(p:PlayerBoard):Boolean
        +hasHarmony():Boolean
    }

    class NormalMode implements GameMode{
        +calculateScore(p:PlayerBoard):Integer
        +countcell(p:PlayerBoard, x:Integer,y:Integer):Integer
        +countcrown(p:PlayerBoard, x:Integer,y:Integer):Integer
        +isHarmony(p:PlayerBoard): Boolean
        +hasHarmony():Boolean
        +isKingdomMiddle(p:PlayerBoard):Boolean
    }

    class Player{
        -playerName:String

        +Player(color:KingColor,pName:String,board:PlayerBoard)
        +getPlayerColor():KingColor
        +getPlayerName():String
        +getBoard():PlayerBoard
    }

    class PlayerBoard{
        -BOARD_SIZE:Integer=5

        +PlayerBoard()
        +PlayerBoard(castle:Castle)
        +setCastle(x:Integer,y:Integer,castle:Castle):Boolean
        +setTile(x:Integer,y:Integer,dir:Direction,tile:Tile):Boolean
        +getRightXY(x:Integer,y:Integer, dir:Direction):Integer[]
        +isPosable(x:Integer,y:Integer):Boolean
        +isPlayable(tile:Tile):Boolean
        +isSameGround(x:Integer,y:Integer, ground:Ground):Boolean
        +getPositionnable(x:Integer, y:Integer):Positionnable
        +getBOARD_SIZE():Integer
    }

    interface PlayerStrategy <<interface>>{
        +getnbTile():Integer
        +getnbBoard():Integer
        +getnbKings():Integer
    }

    interface Positionnable <<interface>>{
        +getColor():GroundColor
        +getCrownNumber():Integer
        +isGroundCounted():Boolean
        +isCrownCounted():Boolean
        +setGroundCounted(groundCounted:Boolean)
        +setCrownCounted(crownCounted:Boolean)
    }

    ' pas implémenter car on implémente pas les classes propres à Java
    class Tile{
        -number:Integer
        '-direction:Direction Récup a partir de la relation aussi

        +Tile(number:Integer)
        +Tile(number:Integer,left:Ground, right:Ground)
        +getLeft():Ground
        +getRight():Ground
        +getNumber():Integer
        +rotate()
        +reverse()
        +getDirection():Direction
        +compareTo(o:Tile):Integer
    }

}

package Utilities{
    class CSVReader{
        {static} - RESSOURCE_PATH = "./kingdomino/ressources/"
        {static} read(filename:String):String[]
    }

    class FontReader{
        -algerian : Font
        -showcard : Font
        -bookmanold : Font
        -symbola : Font

        -FontReader()
        {static}+getInstance():FontReader
        +getAlgerian(): Font
        +getShowcard(): Font
        +getBookmanold(): Font
        +getSymbola(): Font
    }

    class IMGReader{
        {static}-TILE_IMG_SIZE:Integer = 60
        {static} - RESSOURCE_PATH = "./kingdomino/ressources/"
        {static}+getImagePnl(String:filename)
        {static}+getImage(String:filename, width:Integer, height:Integer)
        {static}+getImage(filename:String)
        {static}+getImage(color:GroundColor)
        {static}+getImage(color:GroundColor,crown:Integer)
        {static}+getTileImgSize():Integer
    }
}

package Views #D0E1D4{
    package Components{
        class ErrorMessage{
            +ErrorMessage()
            +setText(text:String)
        }

        class MyLabel{
            +MyLabel()
            +MyLabel(text: String)
            +MyLabel(text: String, alignment: Integer)
            +setOutlineColor(c: Color)
            +setStroke(s: Stroke)
        }

        class PlayerBoardView{
            +PlayerBoardView(gameController:GameController,player:Player,game:GameContext,gameView:GameView)
            +PlayerBoardView(player:Player,game:GameContext)
        }

        class TileView{
            +PlayerBoardView(gameController:GameController, player:Player, game:GameContext, gameView:GameView
        }
    }

    class ChoosingMenu{
         -nbPlayerChoice : String[]

         +ChoosingMenu(mainframe: MyWindow)
         -createColorCbo()
         -isDifferentColor():Boolean
    }

    class EndView{
        +EndView(mainframe: MyWindow)
    }

    class GameView{
        +GameView(mainframe:MyWindow)
        +modifyErrorMessage(msg:String)
        +updateInteractionBoard()
        +updatePlayersBoards()
        +update(game: GameContext)
    }



    class MainMenu{
        +MainMenu(mainframe: MyWindow)
    }
    class MyWindow implements GameObserver{
        '-gameController: GameController DANS LA RELATION AUSSI
        {static}-HEIGHT:Integer=980
        {static}-WIDTH:Integer=1700

        +MyWindow(gameController: GameController, game: GameContext)
        +getGame(): GameContext
        +getGameController(): GameController
        +setGamePanel()
        +setChoosingMenu()
        +setMainMenu()
        +update(gameContext:GameContext)
        +updateEnd(gameContext:GameContext)
        +getHeight():Integer
        +getWidth():Integer
    }
}

class Kingdomino{
    +main(args:String)
}

'les liaisons
'KingDomino crée le controller la fenetre et le contexte
Kingdomino ..> GameController : <<create>>
Kingdomino ..> MyWindow : <<create>>
Kingdomino .> GameContext : <<create>>

'GameContext est composé
 ' -d'une pile de tuile
GameContext *--> "1\n-deck" Deck : > had
'des rois
GameContext *--> "..*\n-king\n..*\n-nextRoundKings" King : > had
 ' -d'un mode de jeu
GameContext *--->"1\n-gameMode"GameMode : > select
' d'une stratégie
GameContext *-> "1\n-playerStrategy" PlayerStrategy :  > select
'de joueurs
GameContext *-> "..*\n-players" Player :  > played by
'aggrégation ! Tile
GameContext o-> "..*\n-currentTiles"Tile
'GameContext va avoir besoin de gameobserver
GameContext o->"..*\n-observers" GameObserver : > observes

'GameController  avec GameContext
GameController o-> "1\n-gameContext" GameContext

'Player est composé d'un plateau de jeu et de roi
Player o--> "1\n-board"PlayerBoard : > had
Player o-> "1\n-color"KingColor : > had

'PlayerBoard contient de positionnable
PlayerBoard o-->"..*\n-board"Positionnable: > contains


'la pile est composé de tuile
Deck *--> "..*\n-tiles"Tile : > had

'Ground est composé de GroundColor
Ground *->"1\n-color"GroundColor: > composed

'Tile contient un coté droit et un coté gauche qui sont des grounds
Tile o-> "1-left\n1-right"Ground
Tile *-> "1\n-direction"Direction

'On utilise decorator en fonction de GameMode
ModeDecorator o--> "1\n-gameMode"GameMode

'King est composé d'une couleur
King *-> "1\n-kingcolor" KingColor : > had
King *-> "..*\n-currentTiles" Tile : > had
King o--> "1\n-player" Player : > possead by
'Castle est composé d'une couleur
Castle *-> "1\n-kingcolor" KingColor : > had

'LES VUES MyWindow va afficher les vues suivantes
MyWindow  *--> "1\n-gameView" GameView : > display
MyWindow  *--> "1\n-mainMenu" MainMenu : > display
MyWindow  *--> "1\n-choosingMenu" ChoosingMenu : > display
MyWindow  *--> "1\n-endView" EndView : > display

'MyWindow a besoin du controlleur et du gamecontext
MyWindow o-> "1\n-controller" GameController : > send \nuser request
MyWindow  o-> "1\n-game"GameContext

'les vues utilisent les labels
GameView *->"2\n-label"MyLabel : > display
GameView *->"2\n-errorMessageLbl"ErrorMessage : > display
EndView *->"..*\n-label"MyLabel : > display
ChoosingMenu *---> "..*\n-label" MyLabel : > display



ChoosingMenu o--> "1\n-mainframe" MyWindow : > had
MainMenu o--> "1\n-mainframe" MyWindow : > had
GameView o--> "1\n-mainframe" MyWindow : > had
EndView o--> "1\n-mainframe" MyWindow : > had


'USES
'PlayerBoard va utiliser les directions
PlayerBoard .> Direction : <<use>>

ErrorMessage .> MyLabel : <<use>>
PlayerBoardView ..> MyLabel : <<use>>

'Deck va utiliser CSVReader
Deck .> CSVReader :  <<use>>

EndView ..> IMGReader : <<use>>
GameView ..> IMGReader: <<use>>
ChoosingMenu .> IMGReader : <<use>>
MainMenu .> IMGReader : <<use>>
TileView ..> IMGReader : <<use>>
PlayerBoardView ..> IMGReader : <<use>>

EndView ..>FontReader :<<use>>
GameView .>FontReader :<<use>>
ChoosingMenu .>FontReader :<<use>>
MainMenu .>FontReader :<<use>>
FontReader *-> "1\n-instance" FontReader : had

GameView ..>TileView : <<use>>
GameView .>PlayerBoardView : <<use>>
GameView .>ErrorMessage : <<use>>

@enduml