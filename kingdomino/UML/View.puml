@startuml
'skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods
skinparam BackgroundColor HoneyDew

'class main qui va executer le jeu
class KingDomino{
+main()
}


package Controller{
'package CONTROLLER
package GameController #technology{
    ' plateau de jeu
    class BoardGame{

        +createPlayer(color:KingColor, kings:Collection<King>)

    }
}

}


package Model #mistyrose{
    'interface players
    interface PlayerStrategy{

    }
    class TwoPlayers implements PlayerStrategy{

    }

    class ThreePlayers implements PlayerStrategy{
    }

   class FourPlayers implements PlayerStrategy{

   }



    class Deck{
        +Deck(deckSize:Integer)
        +getTile():Tile
    }


    'tuiles numéroté
    class Tile {

        -number:Integer
        +getNumber():Integer
        +setNumber(num:Integer)

    }
    'coté de la tuile (droite ou gauche)
    class Ground{
        -crownNumber:Integer
        +getCrownNumber():Integer
        +setCrownNumber():Integer
    }
    'couleur des cotés de la tuile
    enum GroundColor{
    -GREY
    -BLUE
    -DARKGREEN
    -BLACK
    -BROWN
    -YELLOW
    -LIGHTGREEN
    +{static}+getColor(String:color):GroundColor
    }
    'strategy permettant de pouvoir choisir le jeu qu'on veut
    interface GameMode{
        +countPoint(p:Player)
    }
    'contexte du jeu
    class GameContext{
        +setGameMode(strategy:GameMode)
        +setPlayerStrategy(strategy:PlayerStrategy)
    }
    class NormalMode implements GameStrategy{

    }
    'classe dynastie
    'class Dynasty implements GameMode{}
    'class empire du milieu
    package GameModes{



            class NormalMode {
                +countPoint(p:Player)
            }
            abstract class ModeDecorator{
                -wrappee:GameMode
                +ModeDecorator(gameMode:GameMode)
                +countPoint(p:Player)
            }

            class MiddleKingdom extends ModeDecorator {
                +MiddleKingdom()
                +countPoint(p:Player)
            }

            'class harmonie
            class Harmony extends ModeDecorator {
                +Harmony()
                +countPoint(p:Player)
            }
    }
    'interface observer qui va permettre de notifier les changements
    interface GameObserver{
'aussi le score final
    }

    class TileBoard{

        +instance:TileBoard
        {static}+getIntance():TileBoard
    }




    class PlayerBoard{
        +BOARD_SIZE:Integer = 5
        +PlayerBoard(castle:Castle)
        +setTile(x:Integer, y:Integer, direction:Direction, tile:Tile)
        -isPosable(x:Integer, y:Integer):Boolean
        -isSameGround(x:Integer, y:Integer, ground:Ground):Boolean
    }
    interface Positionnable{
        +getColor():GroundColor
    }

    enum Direction{
        NORTH
        SOUTH
        EAST
        WEST
    }

    'joueur
    class Player{
        +Player(kings:Collection<King>)
    }

    'roi
    class King{
        +King(color:KingColor)
    }
    'class chateau
    class Castle {
        +Castle()
    }

    'couleur du roi et du chateau
    enum KingColor{
    -PINK
    -BLUE
    -GREEN
    -YELLOW
    }
}

'package VIEW
package view #D0E1D4{
    'application du jeu (design avec Swing)
    class MyWindow implements GameObserver{

    }

    'classe qui va permettre de notifier la partie utilisée et le score final en fin de partie
    class Log implements GameObserver{

    }
}

package Utilities{
    class CSVReader{
        {static} read(path:String):Collection<Collection<String>>
    }
}


Ground .|> Positionnable
Castle .|> Positionnable
PlayerBoard "..*\n-board" *-r-> Positionnable : > contains

Deck ..> CSVReader :  > use
Ground "1"*-->"1"GroundColor
Tile *-->Ground : "-left\n-right" > composed

'A SUPP
Deck "..* -tiles" *-> Tile : > had



TileBoard o--> Tile : "0,8\ntiles" > had


GameContext *-r-> Deck
GameContext *--> GameMode  : "1\n-GameMode" > select
GameContext *--> PlayerStrategy : "1\n-playerStrategy" > select

BoardGame  *-> Player : "2..4\n-players" > played by
BoardGame *--> GameContext : "1\n-gameContext" > had

Player .> TileBoard : > use
Player *-> PlayerBoard : "1\n-board" > had
Player  o--> King : "1..2\n-kings" > had
PlayerBoard <--* "2..4\n-playerBoards" BoardGame
PlayerBoard "1\n-tile" o--> Tile
PlayerBoard "1\n-castle" o-> Castle : > had

PlayerBoard .> Direction : > use


'Implements de GameMode
'Harmony .u.|> GameMode
'MiddleKingdom .u.|> GameMode
ModeDecorator .u.|> GameMode
NormalMode .u.|> GameMode

King"1\n-color"*->"1" KingColor: > had
Castle"1\n-color"*->KingColor : > had

KingDomino..> BoardGame : <<create>>
KingDomino.> PlayerStrategy : <<use>>
KingDomino..> GameMode : <<use>>
KingDomino *.>MyWindow : <<create>>
KingDomino ..>GameContext : <<create>>
MyWindow o-> BoardGame : > send \nuser request
GameContext o-->GameObserver : > observes
@enduml