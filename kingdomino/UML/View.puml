@startuml
'skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods
skinparam BackgroundColor HoneyDew

'class main qui va executer le jeu
class KingDomino{
+main()
}


package Controller{
'package CONTROLLER
package GameController #technology{
    ' plateau de jeu
    class BoardGame{

    }
}

}


package Model #mistyrose{
    'interface players
    interface PlayerStrategy{

    }
    class TwoPlayers implements PlayerStrategy{

    }

    class ThreePlayers implements PlayerStrategy{
    }

   class FourPlayers implements PlayerStrategy{

   }



    class Deck{
        +Deck(number:Integer)
        +takeCards(number:Integer):Collection<Tile>
    }


    'tuiles numéroté
    class Tile {

        -number
        +getNumber():Integer
        +setNumber(num:Integer)

    }
    'coté de la tuile (droite ou gauche)
    class Ground{

    }
    'couleur des cotés de la tuile
    enum GroundColor{
    -BLUE
    -DARK GREEN
    -BLACK
    -BROWN
    -YELLOW
    -LIGHT GREEN
    }
    'strategy permettant de pouvoir choisir le jeu qu'on veut
    interface GameStrategy{

    }
    'contexte du jeu
    class GameContext{
        +setGameStrategy(strategy:GameStrategy)
        +setPlayerStrategy(strategy:PlayerStrategy)
    }
    class NormalMode implements GameStrategy{

    }
    'classe dynastie
    'class Dynasty implements GameStrategy{}
    'class empire du milieu
    class MiddleKingdom implements GameStrategy{

    }

    'class harmonie
    class Harmony implements GameStrategy{

    }
    'interface observer qui va permettre de notifier les changements
    interface GameObserver{
'aussi le score final
    }




    class PlayerBoard{
        +PlayerBoard()
        +setTile(x:Integer, y:Integer, direction:Direction)
        +isPosable(x:Integer, y:Integer):Boolean
    }
    interface Positionnable{

    }

    enum Direction{
        NORTH
        SOUTH
        EAST
        WEST
    }

    'joueur
    class Player{

    }

    'roi
    class King{
    }
    'class chateau
    class Castle {

    }

    'couleur du roi et du chateau
    enum KingColor{
    -PINK
    -BLUE
    -GREEN
    -YELLOW
    }
}

'package VIEW
package view #D0E1D4{
    'application du jeu (design avec Swing)
    class MyWindow extends JFrame implements GameObserver{

    }
    'JFRAME
    abstract class JFrame{
    }

    'classe qui va permettre de notifier la partie utilisée et le score final en fin de partie
    class Log implements GameObserver{

    }
}


Tile ..|> Positionnable
Castle ..|> Positionnable
PlayerBoard "..*\n-board" *-r-> Positionnable : > contains

Deck "..* -tiles" *-> Tile : > had
Ground "1"*->"1"GroundColor
Tile *->Ground : "-left\n-right" > composed


GameContext *-> Deck
GameContext *--> GameStrategy  : "1\n-gameStrategy" > select
GameContext *--> PlayerStrategy : "1\n-playerStrategy" > select

BoardGame  *-> Player : "2..4\n-players" > played by
BoardGame *--> GameContext : "1\n-gameContext" > had

Player *-> PlayerBoard : "1\n-board" > had
Player  *--> King : "1..2\n-kings" > had
PlayerBoard *--> Tile
PlayerBoard "1\n-castle" *-> Castle : > had

PlayerBoard .> Direction : > use



King"1\n-color"*->"1" KingColor: > had
Castle"1\n-color"*->KingColor : > had

KingDomino..> BoardGame : <<create>>
KingDomino.> PlayerStrategy : <<use>>
KingDomino..> GameStrategy : <<use>>
KingDomino *.>MyWindow : <<create>>
KingDomino ..>GameContext : <<create>>
MyWindow o-> BoardGame : > send \nuser request
GameContext o-->GameObserver : > observes
@enduml